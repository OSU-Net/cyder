Char = (letterOrDigit | '.' | '-' | '_')
OptionValueChar = :c ?(not c in reserved_chars)
FQDN = < Char* >
IP = OptionKey:ip ?( is_ip.match(ip) ) -> ip
HexDigit = :c ?( c in hexdigits )
MACSeg = HexDigit{2}':'
MAC = <MACSeg{5}HexDigit{2}>:mac
#MAC = OptionKey:mac ?( is_mac.match(mac) ) -> mac
OptionKey = < Char* >
OptionValue = < OptionValueChar* >
ParameterKey = OptionKey:p ?(p not in keywords) -> p

Option :scope = ws 'option' ws OptionKey:option_key ws OptionValue:option_value ';'
        -> Option(key=option_key, value=option_value, scope=scope)

Parameter :scope = ws ParameterKey:param_key ws OptionValue:param_value ';'
        -> Parameter(key=param_key, value=param_value, scope=scope)

FixedAddress = ws 'fixed-address' ws IP:ip ';'
        -> {'ip' : ip}

HardwareAddress = ws 'hardware ethernet' ws MAC:mac ';'
        -> {'mac': mac}

HostAttributes = Option(HOST) | HardwareAddress | FixedAddress | Parameter(HOST)

Host = ws 'host' ws FQDN:fqdn ws '{' HostAttributes*:attrs ws '}'
        -> Host(**prepare_arguments(attrs, fqdn=fqdn, exclude_list=['mac', 'fqdn']))

Range = ws 'range' ws IP:start ws IP:end ';'
        -> {'start': start, 'end': end}

Allow = ws 'allow' ws OptionValue:allow ';'
        -> Allow(allow)

Deny = ws 'deny' ws OptionValue:deny ';'
        -> Deny(deny)

PoolAttrs = Option(POOL) | Allow | Parameter(POOL) | Range | Deny

Pool = ws 'pool' ws '{' PoolAttrs*:attrs ws '}'
        -> Pool(**prepare_arguments(attrs, exclude_list=['start', 'end']))

SubnetAttrs = Option(SUBNET) | Pool | Parameter(SUBNET)

Subnet = ws 'subnet' ws IP:network_addr ws 'netmask' ws IP:netmask_addr ws '{'
            SubnetAttrs*:attrs ws
        '}'
        -> Subnet(**prepare_arguments(attrs,
                                      netmask_addr=netmask_addr,
                                      network_addr=network_addr))

GroupAttrs = Group | Host | Option(GROUP) | Parameter(GROUP)

Group = ws 'group' ws '{' GroupAttrs*:attrs ws '}'
        -> Group(**prepare_arguments(attrs))

TopLevelGroup = Group:group -> self.add_group(group)

TopLevelHost = Host:host -> self.add_host(host)

TopLevelClass = ws 'class' ws '"' (Char | ' ')* ':' IP:start ':' IP:end '"' ws '{'
                        ws 'match' ws <Char*>:match ';' ws '}'

TopLevelSubClass = ws 'subclass' ws '"' (Char | ' ')* ':' IP:start ':' IP:end '"' ws  '1:' MAC:mac ';'
        -> self.add_subclass(start, end, mac)


TopLevelOption = Option(GLOBAL):option -> config.add_option(option)
TopLevelParameter = Parameter(GLOBAL):param -> self.add_parameter(param)
TopLevelSubnet = Subnet:sub -> self.add_subnet(sub)
GlobalParse = (TopLevelClass | TopLevelSubClass | TopLevelSubnet | TopLevelOption | TopLevelParameter | TopLevelGroup | TopLevelHost)* ws -> self
