WS = ' ' | '\t' | '\n'
Char = :c ?(c not in [';' , ' ', '\t'])
OptionValueChar = :c ?(c is not ';')
OptionKey = < Char* >
OptionValue = < OptionValueChar* >
FQDN = < Char* >
IP = OptionKey:ip ?( is_ip.match(ip) ) -> ip
MAC = OptionKey:mac ?( is_mac.match(mac) ) -> mac

Option = WS* 'option' WS OptionKey:key WS OptionValue:value ';'
            -> Option(key, value)

FixedAddress = WS* 'fixed-address' WS* IP:ip ';'
        -> {'ip' : ip}

HardwareAddress = WS* 'hardware ethernet' WS MAC:mac ';'
        -> {'mac': mac}

HostAttributes = (HardwareAddress | FixedAddress)

Range = WS* 'range' WS IP:start WS IP:end ';'
        -> {'start': start, 'end': end }

Failover = WS* 'failover' WS OptionValue:failover ';'
        -> {'failover' : failover}

Allow = WS* 'allow' WS OptionValue:allow ';'
        -> {'allow': allow}

Deny = WS* 'deny' WS OptionValue:deny ';'
        -> {'deny': deny}

PoolAttrs = Option | Allow | Failover | Range | Deny

Pool = WS* 'pool' WS* '{' PoolAttrs*:attrs WS* '}'
        -> parse_to_pool(attrs)

Subnet = WS* 'subnet' WS IP:network_addr WS 'netmask' WS IP:netmask_addr WS '{'
    Option*:options Pool*:pools WS* '}'
        -> Subnet(**{'network_addr': network_addr, 'netmask_addr': netmask_addr,
            'options': options, 'pools':pools})

Host = WS* 'host' WS FQDN:fqdn WS* '{' HostAttributes*:values WS* '}'
        -> Host(fqdn, **dict(e.items()[0] for e in values))

GroupAttrs = Group | Host | Option

Group = WS* 'group' WS* '{' GroupAttrs*:groupattrs WS* '}'
