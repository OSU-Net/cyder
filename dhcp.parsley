ascii = letterOrDigit | (anything:x ?(x in symbols) -> x)
asciiNoQuote = ascii:x ?(x != '"') -> x
asciiSafe = ascii:x ?(x not in '"{};') -> x

quotedString = '"' <(~'"' ('\\"' | asciiNoQuote | ws))+>:x '"' -> x
word = <quotedString | asciiSafe+>


statement = <word (ws word)*>:stmt ws ';' -> Statement(stmt)

rangeStmt = 'range' ws word:start ws word:end ws ';' -> RangeStmt(start, end)

poolItem = (rangeStmt | statement):item ws -> item
pool = 'pool' ws '{' ws poolItem*:contents '}' -> Pool(contents)

subnetItem = (pool | statement):item ws -> item
subnet = 'subnet' ws word:netaddr ws 'netmask' ws word:netmask ws '{' ws
         subnetItem*:contents '}' -> Subnet(netaddr, netmask, contents)

classItem = statement:item ws -> item
class = 'class' ws quotedString:name ws '{' ws classItem*:contents '}'
        -> Class(name, contents)

hostItem = statement:item ws -> item
host = 'host' ws word:name ws '{' ws hostItem*:contents '}'
       -> Host(name, contents)

groupItem = (host | statement):item ws -> item
group = 'group' ws '{' ws '#' ws word:name ws groupItem*:contents '}'
        -> Group(name, contents)

subclassItem = statement:item ws -> item
subclassEnd = ('{' ws subclassItem*:contents '}' -> contents) | (';' -> None)
subclass = 'subclass' ws quotedString:classname ws word:match ws
           subclassEnd:contents
           -> Subclass(classname, match, contents)

configFileItem = (subnet | class | subclass | host | group | statement):item ws
                 -> item
configFile = ws configFileItem*:contents -> ConfigFile(contents)
